var currentPageName = "",
    languageJsonProduct = "",
    languageValidation = "",
    isPaymentProcess = !1,
    isProcessCategoryLoadmore = !1,
    isScrollCategory = !1;
const LanguageCookieKey = "Cookie-Language",
    keyLocalStorage = "pgi-localstorage",
    keyLocalStorageLoginRequest = "login-request",
    userLoginInfo = "user-login-info",
    popupType = {
        verifyOtp: "",
        updatePhone: "",
        forgetPassword: "",
        changePasswordWithOtp: "",
        showPopupWarranty: "",
    },
    MessageType = { Error: 1, Success: 2, Info: 3, Warning: 4 };
function getDataLanguage() {
    let e = "/Template/Language/";
    (e += 1 == getCookie(LanguageCookieKey) ? "product-home-en.json" : "product-home-vi.json"),
        $.ajax({
            type: "GET",
            url: e,
            success: function (e) {
                languageJsonProduct = e;
            },
        });
}
function getDataLanguageValidation() {
    let e = "/api/validation/";
    (e += 1 == getCookie(LanguageCookieKey) ? "en.json" : "vi.json"),
        $.ajax({
            type: "GET",
            url: e,
            success: function (e) {
                languageValidation = e;
            },
        });
}
function getTemplateError() {
    return $.ajax({ type: "GET", url: "/Template/errorHandlerTemplate.html" });
}
(toastr.options = {
    closeButton: !0,
    debug: !1,
    newestOnTop: !1,
    progressBar: !1,
    positionClass: "toast-bottom-right",
    preventDuplicates: !1,
    onclick: null,
    showDuration: "300",
    hideDuration: "1000",
    timeOut: "5000",
    extendedTimeOut: "1000",
    showEasing: "swing",
    hideEasing: "linear",
    showMethod: "fadeIn",
    hideMethod: "fadeOut",
}),
    getDataLanguage(),
    getDataLanguageValidation();
var urlCartApi = "/api/cart/";
function ModelItemCart(e, t, r = 0) {
    (this.ProductId = e), (this.Quantity = t), (this.ColorId = r), (this.IsActive = !0);
}
var listItemInCart = [];
function addProductToCartForGtm(e, t) {
    setAddOrRemoveProductToCartForGtm(e, t, 1);
}
function removeProductToCartForGtm(e, t) {
    setAddOrRemoveProductToCartForGtm(e, t, 2);
}
function setAddOrRemoveProductToCartForGtm(e, t, r) {
    if (null != e && 0 != e && "" != e) {
        var a = "/api/product-detail/get-product-info-for-gtm?productId=" + e;
        null != t && 0 != t && "" != t && (a += "&colorId=" + t),
            $.ajax({ type: "GET", url: a, dataType: "JSON" }).done((e) => {
                null != e &&
                    "" != e &&
                    (2 == r
                        ? dataLayer.push({
                              event: "removeFromCart",
                              ecommerce: { remove: { products: [{ name: e.name, id: e.id, price: e.price, brand: e.brand, category: e.category, quantity: e.quantity, variant: e.variant, dimension11: e.dimension11, metric1: e.metric1 }] } },
                          })
                        : dataLayer.push({
                              event: "addToCart",
                              ecommerce: {
                                  add: {
                                      actionField: { list: currentPageName },
                                      products: [{ name: e.name, id: e.id, price: e.price, brand: e.brand, category: e.category, quantity: e.quantity, variant: e.variant, dimension11: e.dimension11, metric1: e.metric1 }],
                                  },
                              },
                          }));
            });
    }
}
$(document).ready(function () {
    null != getCookie("cart") && "" != getCookie("cart") && null != getCookie("cart") && "undefined" != getCookie("cart") && setCartNumber((listItemInCart = JSON.parse(getCookie("cart"))));
}),
    $(document).on("click", ".js-add-cart", function () {
        var e = $(this).attr("data-product-id"),
            t = $(this).attr("data-color-id");
        (null != t && "" != t && 0 != t) || (t = $(this).parent().parent().find(".product-colors .page-num li.active").attr("data-color-id"));
        var r = listItemInCart.findIndex((r) => r.ProductId == parseInt(e, 10) && r.ColorId == parseInt(t, 10));
        if (r < 0) {
            var a = new ModelItemCart(parseInt(e, 10), 1, parseInt(t, 10));
            listItemInCart.push(a);
        } else listItemInCart[r].Quantity++;
        $(".cart-toggle").addClass("active"),
            setTimeout(function () {
                $(".cart-toggle").removeClass("active");
            }, 1e3),
            addProductToCartForGtm(e, t),
            setCookieOrderCart(listItemInCart);
    }),
    $(document).on("click", ".js-add-cart-product-detail", function () {
        var e = $(this).attr("data-product-id");
        (colorId = 0),
            window.innerWidth > 1100
                ? (colorId = $(".js-add-cart-product-detail").parents(".wrap-text-prd").find(".page-controls li.active").attr("data-color-id"))
                : (colorId = $(".js-add-cart-product-detail").parents(".wrap-text-prd").prev().find(".page-controls li.active").attr("data-color-id"));
        var t = listItemInCart.findIndex((t) => t.ProductId == parseInt(e, 10) && t.ColorId == parseInt(colorId, 10));
        if (t < 0) {
            var r = new ModelItemCart(parseInt(e, 10), 1, parseInt(colorId, 10));
            listItemInCart.push(r);
        } else listItemInCart[t].Quantity++;
        $(".cart-toggle").addClass("active"),
            setTimeout(function () {
                $(".cart-toggle").removeClass("active");
            }, 1e3),
            addProductToCartForGtm(e, colorId),
            setCookieOrderCart(listItemInCart);
    });
var isCreateAddressProcess,
    isProcessFeedback,
    isRegistering,
    isProcess,
    isProcessWarranty,
    setCookieOrderCart = function (e) {
        setCartNumber(e);
        var t = new Date();
        t.setMinutes(t.getMinutes() + 1440), (document.cookie = "cart=" + encodeURIComponent(JSON.stringify(e)) + "; path=/; expires=" + t.toGMTString());
    };
function setCartNumber(e) {
    if (null == e) return;
    let t = 0;
    e.map((e) => (t += e.Quantity)), $(".cart-number.js-cart-number").html(t);
}
function getCookie(e) {
    for (var t = e + "=", r = decodeURIComponent(document.cookie).split(";"), a = 0; a < r.length; a++) {
        for (var o = r[a]; " " == o.charAt(0); ) o = o.substring(1);
        if (0 == o.indexOf(t)) return o.substring(t.length, o.length);
    }
    return null;
}
function setCookie(e, t) {
    var r = new Date();
    r.setMinutes(r.getMinutes() + 1440);
    var a = "expires=" + r.toUTCString();
    document.cookie = e + "=" + t + ";" + a + ";path=/";
}
function removeProductActiveCookie() {
    (listItemInCart = listItemInCart.find((e) => !0 !== e.IsActive)), setCookieOrderCart(listItemInCart);
}
function getMessageLanguage(e) {
    return languageValidation[e];
}
function checkStringHasHtmlTag(e) {
    return e.search("<(\\\"[^\\\"]*\\\"|'[^']*'|[^'\\\">])*>");
}
function isPhoneValidation(e) {
    return new RegExp("^(0|\\+84)(\\s|\\.)?((3[2-9])|(5[689])|(7[06-9])|(8[1-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$").test(e);
}
function isValidateEmail(e) {
    return /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(String(e).toLowerCase());
}
function isValidatePassword(e) {
    return e.length >= 6 && e.length <= 32;
}
function getLocalStorage() {
    const e = localStorage.getItem(keyLocalStorage);
    return null != e ? JSON.parse(e) : null;
}
function setLocalStorage(e) {
    localStorage.setItem(keyLocalStorage, JSON.stringify(e));
}
function clearLocalStorage() {
    localStorage.removeItem(keyLocalStorage);
}
function getParameterByName(e, t) {
    t || (t = window.location.href), (e = e.replace(/[\[\]]/g, "\\$&"));
    var r = new RegExp("[?&]" + e + "(=([^&#]*)|&|#|$)").exec(t);
    return r ? (r[2] ? decodeURIComponent(r[2].replace(/\+/g, " ")) : "") : null;
}
function showErrorFromBackend(e) {
    let t = e.responseJSON.ModelStateErrors;
    null != t &&
        0 !== t.length &&
        getTemplateError().done((e) => {
            showToast(_.template(e)({ data: t }), MessageType.Error);
        }),
        e.responseJSON.Error.length > 0 && 0 === t.length && showToast(e.responseJSON.Error, MessageType.Error);
}
function initSignInGoogle() {
    gapi.load("auth2", () => {
        auth2 = gapi.auth2.init({ client_id: "248392288844-rij553gnef9ncjicm0rph3ajseqt4mbr.apps.googleusercontent.com", scope: "profile email" });
    });
}
function showMessageByToast(e, t, r = "") {
    if (null == e || 0 === e.length) return;
    let a = e.map((e) => getMessageLanguage(e));
    getTemplateError().done((e) => {
        showToast(_.template(e)({ data: a }), t, r), $(".fs-loading").hide();
    });
}
function showToast(e, t, r = "") {
    switch (t) {
        case MessageType.Error:
            toastr.error(e, r);
            break;
        case MessageType.Info:
            toastr.info(e, r);
            break;
        case MessageType.Warning:
            toastr.warning(e, r);
            break;
        case MessageType.Success:
            toastr.success(e, r);
    }
}
function handlerErrorCode(e) {
    let t = [];
    if (400 === e.status) {
        if (void 0 !== e.responseJSON && void 0 !== e.responseJSON.errors && null !== e.responseJSON.errors) {
            for (const [t, r] of Object.entries(e.responseJSON.errors)) showToast(r, MessageType.Error);
            return null != isCreateAddressProcess && (isCreateAddressProcess = !1), null != isProcess && 1 == isProcess && (isProcess = !1), void $(".fs-loading").hide();
        }
        t.push("errorCode400");
    } else
        401 === e.status
            ? t.push("errorCode401")
            : 403 === e.status
            ? t.push("errorCode403")
            : 404 === e.status
            ? t.push("errorCode404")
            : 405 === e.status
            ? t.push("errorCode405")
            : 500 === e.status
            ? void 0 !== e.responseJSON && null != e.responseJSON.ModelStateErrors
                ? (null != isCreateAddressProcess && (isCreateAddressProcess = !1),
                  1 == isPaymentProcess && (isPaymentProcess = !1),
                  null != isProcessFeedback && 1 == isProcessFeedback && (isProcessFeedback = !1),
                  null != isScrollCategory && 1 == isScrollCategory && (isScrollCategory = !1),
                  null != isProcessCategoryLoadmore && 1 == isProcessCategoryLoadmore && (isProcessCategoryLoadmore = !1),
                  null != isRegistering && 1 == isRegistering && (isRegistering = !1),
                  null != isProcess && 1 == isProcess && (isProcess = !1),
                  null != isProcessWarranty && 1 == isProcessWarranty && (isProcessWarranty = !1),
                  $(".fs-loading").hide(),
                  showErrorFromBackend(e))
                : t.push("errorCode500")
            : t.push("errorUnexpected");
    null == isCreateAddressProcess && (isCreateAddressProcess = !1), showMessageByToast(t, MessageType.Error);
}
function sendEmailForSale(e) {
    let t = { UserName: e.Name, Address: e.Address, UserPhone: e.Phone, UserEmail: e.Email, WardId: e.WardId, Content: e.Content };
    $.ajax({ type: "POST", url: "/api/common/send-email-sales", dataType: "JSON", contentType: "application/json", data: JSON.stringify(t) })
        .done((e) => {
            isPaymentProcess = !1;
        })
        .fail((e) => {
            isPaymentProcess = !1;
        });
}
function redirectToLoginPage() {
    window.location.href = "/login";
}
function redirectToHomePage() {
    window.location.href = "/";
}
function updateWhenNumOfProductChange(e) {
    var t = parseInt($(e).val(), 10),
        r = $(e).attr("data-product-id");
    if (t > 0) {
        var a = $(e).parent().parent().find(".js-cart-select-color").attr("data-color-id"),
            o = listItemInCart.findIndex((e) => e.ProductId == parseInt(r, 10) && e.ColorId == parseInt(a, 10));
        o >= 0 && ((listItemInCart[o].Quantity = t), (cartParse.Products[o].Quantity = t), setCookieOrderCart(listItemInCart), calculatorPrice());
    } else 0 == t && $(e).parent().next().trigger("click");
}
function uuidv4() {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (e) => (e ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (e / 4)))).toString(16));
}
function showPopup(e, t = {}) {
    $.get(e, function (e) {
        var r = _.template(e)({ dataInject: t, language: languageJsonProduct });
        (isLoading = !1),
            $("body").addClass("fs-no-scroll"),
            $(".popup-overlay").html(r),
            $(".popup-overlay").fadeIn(500, function () {
                isLoading = !0;
            });
    });
}
function b64DecodeUnicode(e) {
    return decodeURIComponent(
        atob(e)
            .split("")
            .map(function (e) {
                return "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2);
            })
            .join("")
    );
}
function b64EncodeUnicode(e) {
    return btoa(
        encodeURIComponent(e).replace(/%([0-9A-F]{2})/g, function (e, t) {
            return String.fromCharCode("0x" + t);
        })
    );
}
function isValidDate(e, t, r) {
    if (e < 1e3 || e > 3e3 || 0 == t || t > 12) return !1;
    var a = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    return (e % 400 == 0 || (e % 100 != 0 && e % 4 == 0)) && (a[1] = 29), r > 0 && r <= a[t - 1];
}
function createDataLayerForUserLogin(e) {
    const t = localStorage.getItem(userLoginInfo);
    var r = {};
    null != (r = null != t && t.constructor == String ? JSON.parse(t) : t) &&
        null != r.UserId &&
        "" != r.UserId &&
        dataLayer.push({ event: "user", user: { user_id: r.UserId, email: r.Email, phone: r.Phone, has_transacted: !0, name: r.FullName, gender: r.Gender, page: e } });
}
function isInViewport(e) {
    if (null != $("#" + e) && $("#" + e).length > 0) {
        const t = $("#" + e)[0].getBoundingClientRect();
        return t.top >= 0 && t.left >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight) && t.right <= (window.innerWidth || document.documentElement.clientWidth);
    }
    return !1;
}
(Number.prototype.format = function (e, t) {
    var r = "\\d(?=(\\d{" + (t || 3) + "})+" + (e > 0 ? "\\." : "$") + ")";
    return this.toFixed(Math.max(0, ~~e)).replace(new RegExp(r, "g"), "$&.");
}),
    $.ajaxPrefilter(function (e, t, r) {
        var a = $.Deferred();
        r.then(a.resolve, function (e) {
            handlerErrorCode(e);
        }),
            ((r = a.promise(r)).success = r.done),
            (r.error = r.fail);
    }),
    $(document).on("keypress", ".js-cart-input", function (e) {
        if (13 == e.keyCode) {
            updateWhenNumOfProductChange(this);
        }
    }),
    $(document).on("change", ".js-cart-input", function (e) {
        updateWhenNumOfProductChange(this);
    }),
    $(document).on("click", ".js-buy-now", function (e) {
        e.preventDefault(),
            e.stopPropagation(),
            setTimeout(function () {
                window.location.href = "/cart";
            }, 100);
    }),
    $(document).on("keypress", 'input[type="tel"]', function (e) {
        8 != e.which && 0 != e.which && (e.which < 48 || e.which > 57) && e.preventDefault();
    }),
    $(document).on("click", ".fs-language-sp.fs-sp a", function (e) {
        e.preventDefault(), e.stopPropagation();
    }),
    $(document).on("click", ".language a", function (e) {
        e.preventDefault(), e.stopPropagation();
    }),
    $(document).on("click", ".js-call-phone", function (e) {
        e.preventDefault();
        var t = $(this).attr("data-tel");
        null != t && null != t && ($("body").append(`<a class="js-phone-tmp" href="${t}">tmp</a>`), $(".js-phone-tmp").trigger("click"), (location.href = t), $(".js-phone-tmp").remove());
    }),
    $(document).on("click", ".js-search-top-but", function (e) {
        e.preventDefault();
        var t = $("#txt_search").val();
        if (($(window).width() < 1100 && (t = $("#txt_search_sp").val()), null != (t = t.trim()) && "" != t)) {
            let e = b64EncodeUnicode(unescape(t));
            window.history.pushState(null, "", "/search?q=" + e), (window.location.href = "/search?q=" + e);
        }
    }),
    $("#txt_search")
        .autocomplete({
            source: function (e, t) {
                $.ajax({
                    url: "/search/auto-complete",
                    dataType: "html",
                    data: { q: e.term },
                    success: function (e) {
                        $(".search-suggest").html(e), $(".search-suggest").addClass("active");
                    },
                });
            },
            minLength: 2,
            select: function (e, t) {},
        })
        .keyup(function (e) {
            if (($("#txt_search").val().length <= 1 && ($(".search-suggest").html(""), $(".search-suggest").removeClass("active")), "Enter" === e.key)) {
                var t = $(this).val();
                if (null != t) {
                    let e = b64EncodeUnicode(unescape(t));
                    window.history.pushState(null, "", "/search?q=" + e), (window.location.href = "/search?q=" + e);
                }
            }
        }),
    $("#txt_search_sp")
        .autocomplete({
            source: function (e, t) {
                $.ajax({
                    url: "/search/auto-complete",
                    dataType: "html",
                    data: { q: e.term },
                    success: function (e) {
                        $(".search-suggest").html(e), $(".search-suggest").addClass("active");
                    },
                });
            },
            minLength: 2,
            select: function (e, t) {},
        })
        .keyup(function (e) {
            $("#txt_search_sp").val().length <= 1 && ($(".search-suggest").html(""), $(".search-suggest").removeClass("active"));
        }),
    $(document).on("focus", "#searchTopAreaInHeader", function (e) {
        $(".search-suggest").addClass("active");
    }),
    $(document).on("focusout", "#searchTopAreaInHeader", function (e) {
        $(".search-suggest").removeClass("active");
    }),
    $(document).on("click", ".page-num li, .page-number li ", function (e) {
        e.preventDefault(), e.stopPropagation(), $(this).parent().parent().parent().parent().parent().find('[class*="colorShow_"]').hide();
        var t = "colorShow_" + $(this).attr("data-color-id");
        $(this)
            .parent()
            .parent()
            .parent()
            .parent()
            .parent()
            .find("." + t)
            .show();
    }),
    $(document).on("click", ".product-item a", function (e) {
        if (0 == $(".add-to-cart").has(e.target).length && !$(".add-to-cart").is(e.target) && 0 == $(".page-controls").has(e.target).length && !$(".page-controls").is(e.target)) {
            var t = $(this).attr("data-sectionName"),
                r = $(this).attr("data-model"),
                a = $(this).attr("data-name"),
                o = $(this).attr("data-brand"),
                n = $(this).attr("data-cat"),
                s = $(this).attr("data-price"),
                i = $(this).attr("data-slug");
            dataLayer.push({ event: "productClick", ecommerce: { currencyCode: "VND", click: { actionField: { list: t }, products: [{ id: r, name: a, brand: o, category: n, price: s }] } }, eventCallback: "" }), (window.location.href = i);
        }
    });
